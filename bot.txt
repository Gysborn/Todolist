from django.core.management import BaseCommand

from bot.models import TgUser
from bot.tg.client import TgClient
from bot.tg.schemas import Message
from goals.models import Goal, GoalCategory
from goals.serializers import GoalSerializer


# TODO Добавить логгера

class Command(BaseCommand):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.tg_client = TgClient()
        self.u_id = None

    def get_goals(self, msg):
        obj = Goal.objects.filter(user_id=self.u_id)
        result = GoalSerializer(obj, many=True)
        for d in result.data:
            self.tg_client.send_message(msg.chat.id, '#' + ' ' + d['title'])

    def create_goal(self, msg):
        tg_user = TgUser.objects.get(chat_id=msg.chat.id)

    def _choice_category(self, tg_user: TgUser):
        categories = GoalCategory.objects.filter(
            board__participants__user=tg_user.user,
            is_deleted=False
        )
        dict_categories = {item.title: item for item in categories}

    def cond_a(self, msg: Message):
        print('handle a')
        tg_user, created = TgUser.objects.get_or_create(chat_id=msg.chat.id)
        categories = GoalCategory.objects.filter(
            board__participants__user_id=tg_user.user_id,
        )
        if not categories:
            print('пусто')
        self.tg_client.send_message(msg.chat.id,
                                    f'Выбери категорию: {[category.title for category in categories]}\n'
                                    f'Для отмены введи /cancel')
        if not created:
            self.u_id = tg_user.user_id
            self.cond_c(msg)
        else:
            self.cond_b(tg_user, msg)

    def cond_b(self, tg_user: TgUser, msg: Message):
        print('handle b')
        self.tg_client.send_message(msg.chat.id, 'Hello')
        code = tg_user.set_verification_code()
        self.tg_client.send_message(msg.chat.id, f'Your verification code: {code}')

    def cond_c(self, msg: Message):
        self.tg_client.send_message(
            msg.chat.id,
            'Выбериете команду:'
            '\n/goals => посмотреть цели'
            '\n/create => создать цель'
        )

        print('handle c')
        if msg.text == '/goals':
            obj = Goal.objects.filter(user_id=self.u_id)
            result = GoalSerializer(obj, many=True)
            for d in result.data:
                self.tg_client.send_message(msg.chat.id, '#' + ' ' + d['title'])

        else:
            self.tg_client.send_message(msg.chat.id, 'А я думала сова!')

    def handle(self, *args, **options):
        offset = 0
        while True:
            res = self.tg_client.get_updates(offset=offset)
            for item in res.result:
                offset = item.update_id + 1
                self.handle_message(item.message)

    def handle_message(self, msg: Message):
        self.cond_a(msg)
        # tg_user, created = TgUser.objects.get_or_create(chat_id=msg.chat.id)
        # if not created:
        #     self.u_id = tg_user.user_id
        #     self.user_authorized(msg)
        # else:
        #     self.user_unauthorized(tg_user, msg)

    # def user_unauthorized(self, tg_user: TgUser, msg: Message):
    #     self.tg_client.send_message(msg.chat.id, 'Hello')
    #
    #     code = tg_user.set_verification_code()
    #     self.tg_client.send_message(msg.chat.id, f'Your verification code: {code}')
    #
    # def user_authorized(self, msg):
    #     self.tg_client.send_message(msg.chat.id, 'Authorized')
    #     if msg.text == '/goals':
    #         obj = Goal.objects.filter(user_id=self.u_id)
    #         result = GoalSerializer(obj, many=True)
    #         for d in result.data:
    #             print(d['title'])
    #             self.tg_client.send_message(msg.chat.id, '#' + ' ' + d['title'])
